@model MVCSchool.Models.ViewModels.AdminViewModel
@using PagedList.Mvc;

<div class="col-md-6">
    <h2 class="m-4 text-center">Trainers</h2>

    <div class="container pull-left mt-1 mb-1">
        <div class="input-group rounded">
            @using (@Html.BeginForm("Index", "Admin", FormMethod.Get, new { @class = "form-inline" }))
            {
                @Html.TextBox("searchByNameT", null, new { @class = "form-control", placeholder = "Search", type = "search" })
                <input type="hidden" name="sortOrder" value="@Model.CurrentSortOrder" />

                <input class="btn btn-sm btn-outline-success m-1" type="submit" value="Search" />
                <input id="resetButtonT" class="btn btn-sm btn-outline-secondary  m-1" type="button" value="Reset" />
            }
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-hover table-light table-striped text-center">
            <thead class="thead-dark">
                <tr>
                    <th>
                        Image
                    </th>
                    <th>
                        @Html.ActionLink("First Name", "Index", "Admin", new { sortOrder = Model.FirstNameTSort, searchByNameT = Model.SearchByNameTr }, new { style = "text-decoration:none" })
                    </th>
                    <th>
                        @Html.ActionLink("Last Name", "Index", "Admin", new { sortOrder = Model.LastNameTSort, searchByNameT = Model.SearchByNameTr }, new { style = "text-decoration:none" })
                    </th>
                    <th>
                        @Html.ActionLink("Subject", "Index", "Admin", new { sortOrder = Model.SubjectSort, searchByNameT = Model.SearchByNameTr }, new { style = "text-decoration:none" })
                    </th>
                    <th>
                        Years of Experience
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trainer in Model.PagedTrainers)
                {
                    <tr id="@trainer.TrainerId">
                        @if (!(string.IsNullOrEmpty(trainer.PhotoUrl)))
                        {
                            <td>
                                <img class="img-fluid" width="70px" src="@trainer.PhotoUrl" />
                            </td>
                        }
                        else
                        {
                            <td>
                                <img class="img-fluid" src="~/Content/img/photo_not_available_large.jpg" width="70px" />
                            </td>
                        }
                        <td>@trainer.FirstName</td>
                        <td>@trainer.LastName</td>
                        <td>@trainer.Subject</td>
                        <td>@trainer.YearsOfExperience</td>
                        <td>
                            @Html.ActionLink("Info", "Details", "Trainer", new { id = trainer.TrainerId }, new { @class = "btn btn-sm btn-outline-info m-1" })
                            @Html.ActionLink("Edit", "Edit", "Trainer", new { id = trainer.TrainerId }, new { @class = "btn btn-sm btn-success m-1" })
                            @Html.ActionLink("Delete", "Delete", "Trainer", new { id = trainer.TrainerId }, new { @class = "btn btn-sm btn-danger m-1" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        Page @(Model.PagedTrainers.PageCount < Model.PagedTrainers.PageNumber ? 0 : Model.PagedTrainers.PageNumber) of @Model.PagedTrainers.PageCount
        @Html.PagedListPager(Model.PagedTrainers, x => @Url.Action("Index", "Admin", new { pageT = x }), PagedListRenderOptions.TwitterBootstrapPager)

        @Html.ActionLink("Add Trainer", "Create", "Trainer", null, new { @class = "btn btn-sm btn-primary m-1 pull-right" })
    </div>
</div>